"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkgalaxy_gen_client"] = self["webpackChunkgalaxy_gen_client"] || []).push([["src_js_lib_galaxy_ts"],{

/***/ "./pkg/galaxy_gen_backend.js":
/*!***********************************!*\
  !*** ./pkg/galaxy_gen_backend.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Galaxy: () => (/* binding */ Galaxy),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   initSync: () => (/* binding */ initSync)\n/* harmony export */ });\nlet wasm;\nconst cachedTextDecoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-8', {\n  ignoreBOM: true,\n  fatal: true\n}) : {\n  decode: () => {\n    throw Error('TextDecoder not available');\n  }\n};\nif (typeof TextDecoder !== 'undefined') {\n  cachedTextDecoder.decode();\n}\n;\nlet cachedUint8Memory0 = null;\nfunction getUint8Memory0() {\n  if (cachedUint8Memory0 === null || cachedUint8Memory0.byteLength === 0) {\n    cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n  }\n  return cachedUint8Memory0;\n}\nfunction getStringFromWasm0(ptr, len) {\n  ptr = ptr >>> 0;\n  return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\nlet cachedInt32Memory0 = null;\nfunction getInt32Memory0() {\n  if (cachedInt32Memory0 === null || cachedInt32Memory0.byteLength === 0) {\n    cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);\n  }\n  return cachedInt32Memory0;\n}\nlet cachedUint16Memory0 = null;\nfunction getUint16Memory0() {\n  if (cachedUint16Memory0 === null || cachedUint16Memory0.byteLength === 0) {\n    cachedUint16Memory0 = new Uint16Array(wasm.memory.buffer);\n  }\n  return cachedUint16Memory0;\n}\nfunction getArrayU16FromWasm0(ptr, len) {\n  ptr = ptr >>> 0;\n  return getUint16Memory0().subarray(ptr / 2, ptr / 2 + len);\n}\n/**\n*/\nclass Galaxy {\n  __destroy_into_raw() {\n    const ptr = this.__wbg_ptr;\n    this.__wbg_ptr = 0;\n    return ptr;\n  }\n  free() {\n    const ptr = this.__destroy_into_raw();\n    wasm.__wbg_galaxy_free(ptr);\n  }\n  /**\n  * @param {number} size\n  * @param {number} mass\n  */\n  constructor(size, mass) {\n    const ret = wasm.galaxy_new(size, mass);\n    this.__wbg_ptr = ret >>> 0;\n    return this;\n  }\n  /**\n  */\n  seed() {\n    wasm.galaxy_seed(this.__wbg_ptr);\n  }\n  /**\n  */\n  tick() {\n    wasm.galaxy_tick(this.__wbg_ptr);\n  }\n  /**\n  * @returns {Uint16Array}\n  */\n  cell_mass() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.galaxy_cell_mass(retptr, this.__wbg_ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v1 = getArrayU16FromWasm0(r0, r1).slice();\n      wasm.__wbindgen_free(r0, r1 * 2, 2);\n      return v1;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n}\nasync function __wbg_load(module, imports) {\n  if (typeof Response === 'function' && module instanceof Response) {\n    if (typeof WebAssembly.instantiateStreaming === 'function') {\n      try {\n        return await WebAssembly.instantiateStreaming(module, imports);\n      } catch (e) {\n        if (module.headers.get('Content-Type') != 'application/wasm') {\n          console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n        } else {\n          throw e;\n        }\n      }\n    }\n    const bytes = await module.arrayBuffer();\n    return await WebAssembly.instantiate(bytes, imports);\n  } else {\n    const instance = await WebAssembly.instantiate(module, imports);\n    if (instance instanceof WebAssembly.Instance) {\n      return {\n        instance,\n        module\n      };\n    } else {\n      return instance;\n    }\n  }\n}\nfunction __wbg_get_imports() {\n  const imports = {};\n  imports.wbg = {};\n  imports.wbg.__wbindgen_throw = function (arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n  };\n  return imports;\n}\nfunction __wbg_init_memory(imports, maybe_memory) {}\nfunction __wbg_finalize_init(instance, module) {\n  wasm = instance.exports;\n  __wbg_init.__wbindgen_wasm_module = module;\n  cachedInt32Memory0 = null;\n  cachedUint16Memory0 = null;\n  cachedUint8Memory0 = null;\n  return wasm;\n}\nfunction initSync(module) {\n  if (wasm !== undefined) return wasm;\n  const imports = __wbg_get_imports();\n  __wbg_init_memory(imports);\n  if (!(module instanceof WebAssembly.Module)) {\n    module = new WebAssembly.Module(module);\n  }\n  const instance = new WebAssembly.Instance(module, imports);\n  return __wbg_finalize_init(instance, module);\n}\nasync function __wbg_init(input) {\n  if (wasm !== undefined) return wasm;\n  if (typeof input === 'undefined') {\n    input = new URL(/* asset import */ __webpack_require__(/*! galaxy_gen_backend_bg.wasm */ \"./pkg/galaxy_gen_backend_bg.wasm\"), __webpack_require__.b);\n  }\n  const imports = __wbg_get_imports();\n  if (typeof input === 'string' || typeof Request === 'function' && input instanceof Request || typeof URL === 'function' && input instanceof URL) {\n    input = fetch(input);\n  }\n  __wbg_init_memory(imports);\n  const {\n    instance,\n    module\n  } = await __wbg_load(await input, imports);\n  return __wbg_finalize_init(instance, module);\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__wbg_init);\n\n//# sourceURL=webpack://galaxy_gen_client/./pkg/galaxy_gen_backend.js?");

/***/ }),

/***/ "./src/js/lib/galaxy.ts":
/*!******************************!*\
  !*** ./src/js/lib/galaxy.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Main: () => (/* binding */ Main)\n/* harmony export */ });\n/* harmony import */ var galaxy_gen_backend_galaxy_gen_backend__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! galaxy_gen_backend/galaxy_gen_backend */ \"./pkg/galaxy_gen_backend.js\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n\n/**\n * Main is constructed with already compiled wasm\n * and does business logic with that wasm\n */\nvar Main = /*#__PURE__*/function () {\n  function Main(galaxySize) {\n    _classCallCheck(this, Main);\n    this.galaxySize = galaxySize;\n    this.galaxy = new galaxy_gen_backend_galaxy_gen_backend__WEBPACK_IMPORTED_MODULE_0__.Galaxy(galaxySize, 0);\n  }\n  _createClass(Main, [{\n    key: \"seed\",\n    value: function seed() {\n      this.galaxy.seed();\n    }\n  }, {\n    key: \"tick\",\n    value: function tick() {\n      this.galaxy.tick();\n    }\n  }, {\n    key: \"cells\",\n    value: function cells() {\n      var _this = this;\n      // Uint16Array to list of numbers\n      var cells = [];\n      var mass = Array.from(this.galaxy.cell_mass());\n      mass.forEach(function (element, index) {\n        cells.push({\n          mass: element,\n          x: index % _this.galaxySize,\n          y: Math.floor(index / _this.galaxySize)\n        });\n      });\n      return cells;\n    }\n  }]);\n  return Main;\n}();\n\n//# sourceURL=webpack://galaxy_gen_client/./src/js/lib/galaxy.ts?");

/***/ }),

/***/ "./pkg/galaxy_gen_backend_bg.wasm":
/*!****************************************!*\
  !*** ./pkg/galaxy_gen_backend_bg.wasm ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__.p + \"15c574c154bd01df96a5.wasm\";\n\n//# sourceURL=webpack://galaxy_gen_client/./pkg/galaxy_gen_backend_bg.wasm?");

/***/ })

}]);